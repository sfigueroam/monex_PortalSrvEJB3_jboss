/*
 * Source: TrxFormFullFcCaller.java - Generated by OBCOM SQL Wizard 5.1.295
 * Author: Felipe Gonzalez Mendoza (Tesoreria General de la Republica)
 *
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile). All rights reserved.
 *
 * All rights to this product are owned by OBCOM INGENIERIA S.A. and may only be
 * used  under  the  terms of its associated license document. You may NOT copy,
 * modify, sublicense, or distribute this source file or portions of  it  unless
 * previously  authorized in writing by OBCOM INGENIERIA S.A. In any event, this
 * notice and above copyright must always be included verbatim with this file.
 */

package cl.teso.reca.pkgcutservicestrx;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import javax.sql.DataSource;
import javax.sql.RowSet;

/**
 * Implements a caller of procedure "PKG_CUT_SERVICES_TRX.TRX_FORM_FULL_FC".
 * <pre>
 * IN_USER             VARCHAR2(4000)     Input
 * IN_RUT_IRA          NUMBER             Input
 * IN_RUT_IRA_DV       CHAR(2000)         Input
 * IN_FORM_TIPO        NUMBER             Input
 * IN_FORM_VER         CHAR(2000)         Input
 * IN_ITEMS            VARCHAR2(4000)     Input
 * IN_ID_ORIGEN        VARCHAR2(4000)     Input
 * IN_PAQUETE          VARCHAR2(4000)     Input
 * IN_RUTA             VARCHAR2(4000)     Input
 * IN_FOLIO_F01        NUMBER             Input
 * IN_FECHA_ORIGEN     DATE               Input
 * IN_FECHA_CAJA       DATE               Input
 * IN_LOTE_ID          NUMBER             Input
 * IN_LOTE_CANAL       NUMBER             Input
 * IN_LOTE_TIPO        NUMBER             Input
 * IN_CUT_MOV_ESTADO   NUMBER             Input
 * IN_ES_REVERSA       CHAR(2000)         Input
 * IN_MOV_ID_ANULAR    NUMBER             Input
 * IN_FRM_OPCION       CHAR(2000)         Input
 * IN_FMT_DATA_ERR     VARCHAR2(4000)     Input
 * IN_FMT_DATA_SAL     VARCHAR2(4000)     Input
 * IN_MOTIVO           VARCHAR2(4000)     Input
 * IN_RESOLUCION       VARCHAR2(4000)     Input
 * IN_ENVIA_TRN_SAF    CHAR(2000)         Input
 * OUT_ERRLVL          NUMBER             Output
 * OUT_MENSAJES        VARCHAR2(4000)     Output
 * OUT_TRN_TRAN_ID     VARCHAR2(4000)     Output
 * OUT_CUT_MOV_ID      VARCHAR2(4000)     Output
 * OUT_RECA_MSG        REF CURSOR         Output
 * OUT_FECHA_CONTABLE  DATE               Output
 * IN_CALIFICADOR      VARCHAR2(4000)     Input
 * IN_LABEL            VARCHAR2(4000)     Input
 * </pre>
 */
public class TrxFormFullFcCaller extends ProcedureCaller
{
    /**
     * Executes procedure "PKG_CUT_SERVICES_TRX.TRX_FORM_FULL_FC" using a DataSource.
     */
    public static TrxFormFullFcResult execute(DataSource dataSource, String inUser, BigDecimal inRutIra, String inRutIraDv, BigDecimal inFormTipo, String inFormVer, String inItems, String inIdOrigen, String inPaquete, String inRuta, BigDecimal inFolioF01, Date inFechaOrigen, Date inFechaCaja, BigDecimal inLoteId, BigDecimal inLoteCanal, BigDecimal inLoteTipo, BigDecimal inCutMovEstado, String inEsReversa, BigDecimal inMovIdAnular, String inFrmOpcion, String inFmtDataErr, String inFmtDataSal, String inMotivo, String inResolucion, String inEnviaTrnSaf, String inCalificador, String inLabel)
        throws SQLException
    {
        Connection conn = dataSource.getConnection();
        try {
            return execute(conn, inUser, inRutIra, inRutIraDv, inFormTipo, inFormVer, inItems, inIdOrigen, inPaquete, inRuta, inFolioF01, inFechaOrigen, inFechaCaja, inLoteId, inLoteCanal, inLoteTipo, inCutMovEstado, inEsReversa, inMovIdAnular, inFrmOpcion, inFmtDataErr, inFmtDataSal, inMotivo, inResolucion, inEnviaTrnSaf, inCalificador, inLabel);
        } finally {
            conn.close();
        }
    }

    /**
     * Executes procedure "PKG_CUT_SERVICES_TRX.TRX_FORM_FULL_FC" using a Connection.
     */
    public static TrxFormFullFcResult execute(Connection conn, String inUser, BigDecimal inRutIra, String inRutIraDv, BigDecimal inFormTipo, String inFormVer, String inItems, String inIdOrigen, String inPaquete, String inRuta, BigDecimal inFolioF01, Date inFechaOrigen, Date inFechaCaja, BigDecimal inLoteId, BigDecimal inLoteCanal, BigDecimal inLoteTipo, BigDecimal inCutMovEstado, String inEsReversa, BigDecimal inMovIdAnular, String inFrmOpcion, String inFmtDataErr, String inFmtDataSal, String inMotivo, String inResolucion, String inEnviaTrnSaf, String inCalificador, String inLabel)
        throws SQLException
    {
        TrxFormFullFcResult result = new TrxFormFullFcResult();
        ArrayList resultSets = new ArrayList();
        if (conn.getMetaData().getURL().startsWith("jdbc:oracle:")) {
            CallableStatement call = conn.prepareCall("{call PKG_CUT_SERVICES_TRX.TRX_FORM_FULL_FC(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            try {
                call.setString(1, inUser);
                call.setBigDecimal(2, inRutIra);
                call.setString(3, inRutIraDv);
                call.setBigDecimal(4, inFormTipo);
                call.setString(5, inFormVer);
                call.setString(6, inItems);
                call.setString(7, inIdOrigen);
                call.setString(8, inPaquete);
                call.setString(9, inRuta);
                call.setBigDecimal(10, inFolioF01);
                call.setTimestamp(11, toTimestamp(inFechaOrigen));
                call.setTimestamp(12, toTimestamp(inFechaCaja));
                call.setBigDecimal(13, inLoteId);
                call.setBigDecimal(14, inLoteCanal);
                call.setBigDecimal(15, inLoteTipo);
                call.setBigDecimal(16, inCutMovEstado);
                call.setString(17, inEsReversa);
                call.setBigDecimal(18, inMovIdAnular);
                call.setString(19, inFrmOpcion);
                call.setString(20, inFmtDataErr);
                call.setString(21, inFmtDataSal);
                call.setString(22, inMotivo);
                call.setString(23, inResolucion);
                call.setString(24, inEnviaTrnSaf);
                call.registerOutParameter(25, Types.NUMERIC);
                call.registerOutParameter(26, Types.VARCHAR);
                call.registerOutParameter(27, Types.VARCHAR);
                call.registerOutParameter(28, Types.VARCHAR);
                call.registerOutParameter(29, ORACLE_CURSOR);
                call.registerOutParameter(30, Types.TIMESTAMP);
                call.setString(31, inCalificador);
                call.setString(32, inLabel);
                call.execute();
                result.setOutErrlvl(call.getBigDecimal(25));
                result.setOutMensajes(call.getString(26));
                result.setOutTrnTranId(call.getString(27));
                result.setOutCutMovId(call.getString(28));
                resultSets.add(toRowSet((ResultSet)call.getObject(29)));
                result.setOutFechaContable(call.getTimestamp(30));
            } finally {
                call.close();
            }
        } else {
            CallableStatement call = conn.prepareCall("{call PKG_CUT_SERVICES_TRX.TRX_FORM_FULL_FC(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            try {
                call.setString(1, inUser);
                call.setBigDecimal(2, inRutIra);
                call.setString(3, inRutIraDv);
                call.setBigDecimal(4, inFormTipo);
                call.setString(5, inFormVer);
                call.setString(6, inItems);
                call.setString(7, inIdOrigen);
                call.setString(8, inPaquete);
                call.setString(9, inRuta);
                call.setBigDecimal(10, inFolioF01);
                call.setTimestamp(11, toTimestamp(inFechaOrigen));
                call.setTimestamp(12, toTimestamp(inFechaCaja));
                call.setBigDecimal(13, inLoteId);
                call.setBigDecimal(14, inLoteCanal);
                call.setBigDecimal(15, inLoteTipo);
                call.setBigDecimal(16, inCutMovEstado);
                call.setString(17, inEsReversa);
                call.setBigDecimal(18, inMovIdAnular);
                call.setString(19, inFrmOpcion);
                call.setString(20, inFmtDataErr);
                call.setString(21, inFmtDataSal);
                call.setString(22, inMotivo);
                call.setString(23, inResolucion);
                call.setString(24, inEnviaTrnSaf);
                call.registerOutParameter(25, Types.NUMERIC);
                call.registerOutParameter(26, Types.VARCHAR);
                call.registerOutParameter(27, Types.VARCHAR);
                call.registerOutParameter(28, Types.VARCHAR);
                call.registerOutParameter(29, Types.TIMESTAMP);
                call.setString(30, inCalificador);
                call.setString(31, inLabel);
                int updateCount = 0;
                boolean haveRset = call.execute();
                while (haveRset || updateCount != -1) {
                    if (!haveRset)
                        updateCount = call.getUpdateCount();
                    else
                        resultSets.add(toRowSet(call.getResultSet()));
                    haveRset = call.getMoreResults();
                }
                result.setOutErrlvl(call.getBigDecimal(25));
                result.setOutMensajes(call.getString(26));
                result.setOutTrnTranId(call.getString(27));
                result.setOutCutMovId(call.getString(28));
                result.setOutFechaContable(call.getTimestamp(29));
            } finally {
                call.close();
            }
        }
        if (resultSets.size() > 0) {
            RowSet[] rowSets = new RowSet[resultSets.size()];
            result.setRowSets((RowSet[]) resultSets.toArray(rowSets));
        }
        return result;
    }
}
